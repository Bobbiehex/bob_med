// Prisma schema
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  NURSE
  DOCTOR

  @@map("UserRole")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]

  // âœ… Added relation fields
  staffMessages Message[] @relation("StaffMessages")
  userMessages  Message[] @relation("UserMessages")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Message {
  id        String   @id @default(cuid())
  staffId   String
  userId    String // the user who sent or received this message
  from      String // "user" or "staff"
  text      String
  createdAt DateTime @default(now())

  staff User @relation("StaffMessages", fields: [staffId], references: [id])
  user  User @relation("UserMessages", fields: [userId], references: [id])
}

model Booking {
  id        String   @id @default(cuid())
  staffId   String
  staffName String
  date      DateTime
  time      String
  reason    String
  createdAt DateTime @default(now())
}

model ai_memory {
  id         Int      @id @default(autoincrement())
  user_id    String
  role       String
  message    String
  created_at DateTime @default(now())

  @@index([user_id])
}

model StaffMessage {
  id        String   @id @default(cuid())
  staffId   String
  userId    String
  from      String
  text      String
  createdAt DateTime @default(now())
}

